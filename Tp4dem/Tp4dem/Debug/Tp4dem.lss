
Tp4dem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000426  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  008001a0  008001a0  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001295  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afe  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad5  00000000  00000000  000024ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00002fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bf  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000663  00000000  00000000  00003a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000409e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3a       	cpi	r26, 0xA9	; 169
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  9e:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_uart>:
#include "serialPort.h"
#include "ctype.h"
#include "mef.h"

void init_uart(){
	SerialPort_Init(103);//inicializa el UART con una configuración específica, donde el valor 103 se usa para configurar la velocidad de transmisión y otros parámetros del UART, como la cantidad de bits de datos y la paridad
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 c9 01 	call	0x392	; 0x392 <SerialPort_Init>
	SerialPort_TX_Enable();//habilita la transmisión (TX) del UART, permitiendo que el microcontrolador pueda enviar datos a través del puerto serie.
  ac:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();//habilita la recepción (RX) del UART, permitiendo que el microcontrolador pueda recibir datos a través del puerto serie
  b0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable(); // Habilitar interrupción RX completa
  b4:	0e 94 df 01 	call	0x3be	; 0x3be <SerialPort_RX_Interrupt_Enable>
	sei(); // Habilitar interrupciones globales
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <esIgual>:
}

uint8_t esIgual(char caracter, char caracter_recibido){
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
	return (caracter_recibido == caracter || caracter_recibido == toupper(caracter));
  c0:	68 17       	cp	r22, r24
  c2:	51 f0       	breq	.+20     	; 0xd8 <esIgual+0x1c>
  c4:	c6 2f       	mov	r28, r22
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 09 02 	call	0x412	; 0x412 <toupper>
  ce:	c8 17       	cp	r28, r24
  d0:	d9 07       	cpc	r29, r25
  d2:	21 f4       	brne	.+8      	; 0xdc <esIgual+0x20>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	03 c0       	rjmp	.+6      	; 0xde <esIgual+0x22>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <esIgual+0x22>
  dc:	80 e0       	ldi	r24, 0x00	; 0
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <mensajeInicial>:

void mensajeInicial(){
	SerialPort_Send_String("Presione una de las siguientes teclas R, G o B para configurar su intencidad\r\n");
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 ed 01 	call	0x3da	; 0x3da <SerialPort_Send_String>
  ec:	08 95       	ret

000000ee <mensaje_estado_red>:
}
void mensaje_estado_red(){
	SerialPort_Send_String("Estas en el estado rojo\r\n");
  ee:	81 e5       	ldi	r24, 0x51	; 81
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 ed 01 	call	0x3da	; 0x3da <SerialPort_Send_String>
  f6:	08 95       	ret

000000f8 <mensaje_estado_green>:
}
void mensaje_estado_green(){
	SerialPort_Send_String("Estas en el estado verde\r\n");
  f8:	8b e6       	ldi	r24, 0x6B	; 107
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 ed 01 	call	0x3da	; 0x3da <SerialPort_Send_String>
 100:	08 95       	ret

00000102 <mensaje_estado_blue>:
}
void mensaje_estado_blue(){
	SerialPort_Send_String("Estas en el estado azul\r\n");
 102:	86 e8       	ldi	r24, 0x86	; 134
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 ed 01 	call	0x3da	; 0x3da <SerialPort_Send_String>
 10a:	08 95       	ret

0000010c <__vector_18>:
}
ISR(USART_RX_vect) {
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	cf 93       	push	r28
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	

	char recibir_caracter = UDR0; // Leer el carácter recibido
 130:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	flagRED   = esIgual('r',recibir_caracter);// Ajustar flag para rojo
 134:	6c 2f       	mov	r22, r28
 136:	82 e7       	ldi	r24, 0x72	; 114
 138:	0e 94 5e 00 	call	0xbc	; 0xbc <esIgual>
 13c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <flagRED>
	flagGREEN = esIgual('g',recibir_caracter);// Ajustar flag para verde
 140:	6c 2f       	mov	r22, r28
 142:	87 e6       	ldi	r24, 0x67	; 103
 144:	0e 94 5e 00 	call	0xbc	; 0xbc <esIgual>
 148:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <flagGREEN>
	flagBLUE  = esIgual('b',recibir_caracter);// Ajustar flag para azul
 14c:	6c 2f       	mov	r22, r28
 14e:	82 e6       	ldi	r24, 0x62	; 98
 150:	0e 94 5e 00 	call	0xbc	; 0xbc <esIgual>
 154:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <flagBLUE>
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	cf 91       	pop	r28
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <main>:
#include "mef.h"
#include "util/delay.h"
extern volatile uint8_t flag_update;
int main(void) {
	
	mef_init();
 17c:	0e 94 c3 00 	call	0x186	; 0x186 <mef_init>

	while (1) {
	//if (flag_update){
	   // flag_update=0;
	    mef_update();
 180:	0e 94 08 01 	call	0x210	; 0x210 <mef_update>
 184:	fd cf       	rjmp	.-6      	; 0x180 <main+0x4>

00000186 <mef_init>:
uint8_t potencia_blue=0;
uint8_t potencia_green=0;

estados estado;
void mef_init(){
	init_uart();
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <init_uart>
	mensajeInicial();
 18a:	0e 94 72 00 	call	0xe4	; 0xe4 <mensajeInicial>
	pwm_init();
 18e:	0e 94 8d 01 	call	0x31a	; 0x31a <pwm_init>
	pot_init();
 192:	0e 94 2b 01 	call	0x256	; 0x256 <pot_init>
	estado=RED;
 196:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <estado>
 19a:	08 95       	ret

0000019c <siguienteEstado>:
	
}
estados siguienteEstado(){
 19c:	cf 93       	push	r28
	estados defecto= estado;
 19e:	c0 91 a6 01 	lds	r28, 0x01A6	; 0x8001a6 <estado>
	if (flagBLUE){
 1a2:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <flagBLUE>
 1a6:	88 23       	and	r24, r24
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <siguienteEstado+0x1a>
		mensaje_estado_blue();
 1aa:	0e 94 81 00 	call	0x102	; 0x102 <mensaje_estado_blue>
		flagBLUE=0;
 1ae:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <flagBLUE>
		return BLUE;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	2b c0       	rjmp	.+86     	; 0x20c <siguienteEstado+0x70>
		}else{
		if (flagGREEN){
 1b6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <flagGREEN>
 1ba:	88 23       	and	r24, r24
 1bc:	31 f0       	breq	.+12     	; 0x1ca <siguienteEstado+0x2e>
			mensaje_estado_green();
 1be:	0e 94 7c 00 	call	0xf8	; 0xf8 <mensaje_estado_green>
			flagGREEN=0;
 1c2:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <flagGREEN>
			return GREEN;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	21 c0       	rjmp	.+66     	; 0x20c <siguienteEstado+0x70>
			}else{
				if (flagRED){
 1ca:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <flagRED>
 1ce:	88 23       	and	r24, r24
 1d0:	31 f0       	breq	.+12     	; 0x1de <siguienteEstado+0x42>
					mensaje_estado_red();
 1d2:	0e 94 77 00 	call	0xee	; 0xee <mensaje_estado_red>
					flagRED=0;
 1d6:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <flagRED>
					return RED;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	17 c0       	rjmp	.+46     	; 0x20c <siguienteEstado+0x70>
				}else{
					uint8_t potencia=get_pot();
 1de:	0e 94 35 01 	call	0x26a	; 0x26a <get_pot>
					switch(estado){
 1e2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <estado>
 1e6:	91 30       	cpi	r25, 0x01	; 1
 1e8:	41 f0       	breq	.+16     	; 0x1fa <siguienteEstado+0x5e>
 1ea:	18 f0       	brcs	.+6      	; 0x1f2 <siguienteEstado+0x56>
 1ec:	92 30       	cpi	r25, 0x02	; 2
 1ee:	49 f0       	breq	.+18     	; 0x202 <siguienteEstado+0x66>
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <siguienteEstado+0x6e>
						case RED:
							potencia_red=potencia;
 1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
							break;	
						case BLUE:
						potencia_blue=potencia;
						break;
					}
					return defecto;
 1f6:	8c 2f       	mov	r24, r28
				}else{
					uint8_t potencia=get_pot();
					switch(estado){
						case RED:
							potencia_red=potencia;
							break;
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <siguienteEstado+0x70>
						case GREEN:
							potencia_green=potencia;
 1fa:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
							break;	
						case BLUE:
						potencia_blue=potencia;
						break;
					}
					return defecto;
 1fe:	8c 2f       	mov	r24, r28
						case RED:
							potencia_red=potencia;
							break;
						case GREEN:
							potencia_green=potencia;
							break;	
 200:	05 c0       	rjmp	.+10     	; 0x20c <siguienteEstado+0x70>
						case BLUE:
						potencia_blue=potencia;
 202:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <potencia_blue>
						break;
					}
					return defecto;
 206:	8c 2f       	mov	r24, r28
						case GREEN:
							potencia_green=potencia;
							break;	
						case BLUE:
						potencia_blue=potencia;
						break;
 208:	01 c0       	rjmp	.+2      	; 0x20c <siguienteEstado+0x70>
					}
					return defecto;
 20a:	8c 2f       	mov	r24, r28
				}
			
		}
	}
}
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <mef_update>:

void mef_update(){
	switch(estado){
 210:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <estado>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	69 f0       	breq	.+26     	; 0x232 <mef_update+0x22>
 218:	18 f0       	brcs	.+6      	; 0x220 <mef_update+0x10>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	99 f0       	breq	.+38     	; 0x244 <mef_update+0x34>
 21e:	08 95       	ret
		case RED:	
		set_potencia_red(potencia_red);
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 224:	0e 94 c3 01 	call	0x386	; 0x386 <set_potencia_red>
		estado=siguienteEstado();
 228:	0e 94 ce 00 	call	0x19c	; 0x19c <siguienteEstado>
 22c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <estado>
		break;
 230:	08 95       	ret
		
		case GREEN:
		set_potencia_green(potencia_green);
 232:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 236:	0e 94 b7 01 	call	0x36e	; 0x36e <set_potencia_green>
		estado=siguienteEstado();
 23a:	0e 94 ce 00 	call	0x19c	; 0x19c <siguienteEstado>
 23e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <estado>
		break;
 242:	08 95       	ret
		
		case BLUE:
		set_potencia_blue(potencia_blue);
 244:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <potencia_blue>
 248:	0e 94 ab 01 	call	0x356	; 0x356 <set_potencia_blue>
		estado=siguienteEstado();
 24c:	0e 94 ce 00 	call	0x19c	; 0x19c <siguienteEstado>
 250:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <estado>
 254:	08 95       	ret

00000256 <pot_init>:
#include "serialPort.h"
#include <stdio.h>

void pot_init() {
	// Configurar el pin PC3 como entrada
	DDRC &= ~(1 << DDC3);
 256:	87 b1       	in	r24, 0x07	; 7
 258:	87 7f       	andi	r24, 0xF7	; 247
 25a:	87 b9       	out	0x07, r24	; 7
	// Configurar ADC: Vref = AVCC, canal ADC3 (PC3), ajustar a la izquierda el resultado
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX1) | (1 << MUX0);
 25c:	83 e6       	ldi	r24, 0x63	; 99
 25e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Habilitar ADC y establecer el prescaler a 128
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 262:	87 e8       	ldi	r24, 0x87	; 135
 264:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 268:	08 95       	ret

0000026a <get_pot>:
}
uint8_t get_pot() {
	// Iniciar conversión ADC
	ADCSRA |= (1 << ADSC);
 26a:	ea e7       	ldi	r30, 0x7A	; 122
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 64       	ori	r24, 0x40	; 64
 272:	80 83       	st	Z, r24
	
	// Esperar a que la conversión termine
	while (ADCSRA & (1 << ADSC));
 274:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 278:	86 fd       	sbrc	r24, 6
 27a:	fc cf       	rjmp	.-8      	; 0x274 <get_pot+0xa>
	
	// Leer el resultado (8 bits)
	uint8_t adcResult = ADCH;
 27c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return adcResult;
 280:	08 95       	ret

00000282 <Timer0_init>:
		potencia_Anterior=potencia;
	   char mensaje[50];  // Tamaño suficiente para el mensaje
	   snprintf(mensaje, sizeof(mensaje), "El color %s tiene una potencia de %d\r\n", color, potencia);
	   SerialPort_Send_String(mensaje);
	}
}
 282:	84 b1       	in	r24, 0x04	; 4
 284:	80 62       	ori	r24, 0x20	; 32
 286:	84 b9       	out	0x04, r24	; 4
 288:	82 e8       	ldi	r24, 0x82	; 130
 28a:	84 bd       	out	0x24, r24	; 36
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	85 bd       	out	0x25, r24	; 37
 290:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PWM_DELTA>
 294:	87 bd       	out	0x27, r24	; 39
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 29c:	08 95       	ret

0000029e <PWM_soft_Update>:
 29e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <PWM_position.1840>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <PWM_position.1840>
 2a8:	8f 3f       	cpi	r24, 0xFF	; 255
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <PWM_soft_Update+0x12>
 2ac:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <PWM_position.1840>
 2b0:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <PWM_position.1840>
 2b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PWM_DELTA>
 2b8:	98 17       	cp	r25, r24
 2ba:	20 f4       	brcc	.+8      	; 0x2c4 <PWM_soft_Update+0x26>
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	80 62       	ori	r24, 0x20	; 32
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	08 95       	ret
 2c4:	85 b1       	in	r24, 0x05	; 5
 2c6:	8f 7d       	andi	r24, 0xDF	; 223
 2c8:	85 b9       	out	0x05, r24	; 5
 2ca:	08 95       	ret

000002cc <__vector_14>:
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
 2ee:	0e 94 4f 01 	call	0x29e	; 0x29e <PWM_soft_Update>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <flag_update>
 2f8:	ff 91       	pop	r31
 2fa:	ef 91       	pop	r30
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <pwm_init>:
 31a:	84 b1       	in	r24, 0x04	; 4
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	84 b9       	out	0x04, r24	; 4
 320:	84 b1       	in	r24, 0x04	; 4
 322:	84 60       	ori	r24, 0x04	; 4
 324:	84 b9       	out	0x04, r24	; 4
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 32e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 332:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 336:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 33a:	22 ea       	ldi	r18, 0xA2	; 162
 33c:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 340:	2d e1       	ldi	r18, 0x1D	; 29
 342:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 346:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 34a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 34e:	0e 94 41 01 	call	0x282	; 0x282 <Timer0_init>
 352:	78 94       	sei
 354:	08 95       	ret

00000356 <set_potencia_blue>:
void set_potencia_blue(uint8_t potencia) {
	//mostrar_Potencia("Azul",potencia);
	cli();
 356:	f8 94       	cli
	OCR1A = 255-potencia;
 358:	2f ef       	ldi	r18, 0xFF	; 255
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	a9 01       	movw	r20, r18
 35e:	48 1b       	sub	r20, r24
 360:	51 09       	sbc	r21, r1
 362:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 366:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei(); 
 36a:	78 94       	sei
 36c:	08 95       	ret

0000036e <set_potencia_green>:
}

void set_potencia_green(uint8_t potencia) {
	   // mostrar_Potencia("Verde",potencia);
		cli();
 36e:	f8 94       	cli
		OCR1B = 255-potencia;
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	a9 01       	movw	r20, r18
 376:	48 1b       	sub	r20, r24
 378:	51 09       	sbc	r21, r1
 37a:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 37e:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		sei(); 
 382:	78 94       	sei
 384:	08 95       	ret

00000386 <set_potencia_red>:
}

void set_potencia_red(uint8_t potencia) {
	//mostrar_Potencia("Rojo",potencia);
	cli();
 386:	f8 94       	cli
	PWM_DELTA= 255-potencia;
 388:	80 95       	com	r24
 38a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PWM_DELTA>
	sei();
 38e:	78 94       	sei
 390:	08 95       	ret

00000392 <SerialPort_Init>:

}
//deshabilita las interrupciones del transmisor 
void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);//deshabilita la interrupción del registro de datos UDR0 vacío
 392:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 396:	96 e0       	ldi	r25, 0x06	; 6
 398:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 39c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3a4:	08 95       	ret

000003a6 <SerialPort_TX_Enable>:
 3a6:	e1 ec       	ldi	r30, 0xC1	; 193
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	88 60       	ori	r24, 0x08	; 8
 3ae:	80 83       	st	Z, r24
 3b0:	08 95       	ret

000003b2 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);//habilita el receptor serie (RX)
 3b2:	e1 ec       	ldi	r30, 0xC1	; 193
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	80 61       	ori	r24, 0x10	; 16
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <SerialPort_RX_Interrupt_Enable>:
}
//habilita las interrupciones del receptor
void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);//habilita la interrupción cuando  hay datos nuevos en el registro de datos UDR0
 3be:	e1 ec       	ldi	r30, 0xC1	; 193
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	80 68       	ori	r24, 0x80	; 128
 3c6:	80 83       	st	Z, r24
 3c8:	08 95       	ret

000003ca <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 3ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3ce:	85 ff       	sbrs	r24, 5
 3d0:	fc cf       	rjmp	.-8      	; 0x3ca <SerialPort_Wait_For_TX_Buffer_Free>
}
 3d2:	08 95       	ret

000003d4 <SerialPort_Send_Data>:
//envia un dato  a través del puerto  serie 
void SerialPort_Send_Data(char data){
	UDR0 = data;//escribe el dato en el registro de datos UDR0 para su transmisión 
 3d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3d8:	08 95       	ret

000003da <SerialPort_Send_String>:
}
//envia una cadena de caracteres   a través del puerto  serie 
void SerialPort_Send_String(char * msg){ //
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ //recorre la cadena de caracteres  hasta encontrar el caracter nulo 
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms ademas espera hasta que el buffer de transmisión  este libre
 3ea:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);//envia cada caracter  de la cadena
 3ee:	f8 01       	movw	r30, r16
 3f0:	80 81       	ld	r24, Z
 3f2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <SerialPort_Send_Data>
		i++;
 3f6:	cf 5f       	subi	r28, 0xFF	; 255
}
//envia una cadena de caracteres   a través del puerto  serie 
void SerialPort_Send_String(char * msg){ //
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ //recorre la cadena de caracteres  hasta encontrar el caracter nulo 
 3f8:	87 01       	movw	r16, r14
 3fa:	0c 0f       	add	r16, r28
 3fc:	11 1d       	adc	r17, r1
 3fe:	f8 01       	movw	r30, r16
 400:	80 81       	ld	r24, Z
 402:	81 11       	cpse	r24, r1
 404:	f2 cf       	rjmp	.-28     	; 0x3ea <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms ademas espera hasta que el buffer de transmisión  este libre
		SerialPort_Send_Data(msg[i]);//envia cada caracter  de la cadena
		i++;
	}
}
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	08 95       	ret

00000412 <toupper>:
 412:	91 11       	cpse	r25, r1
 414:	08 95       	ret
 416:	81 56       	subi	r24, 0x61	; 97
 418:	8a 51       	subi	r24, 0x1A	; 26
 41a:	08 f4       	brcc	.+2      	; 0x41e <toupper+0xc>
 41c:	80 52       	subi	r24, 0x20	; 32
 41e:	85 58       	subi	r24, 0x85	; 133
 420:	08 95       	ret

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
